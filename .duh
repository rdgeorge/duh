#!/usr/bin/env python

from __future__ import print_function
import os
import subprocess
import sys


def to_human_readable(size, precision=2):
    """
    Convert a number of bytes into a human readable format (e.g. GB)
    
    Parameters
    ----------
    size : number
        The number of bytes to format
    precision : int, optional
        The precision with which to format floats (currently not used)
    
    Returns
    -------
    str :
        A string with the formatted size
    """
    suffixes=['B', 'KB', 'MB', 'GB', 'TB']
    suffixIndex = 0
    try:
        while size > 1024:
            suffixIndex += 1  # increment the index of the suffix
            size = size / 1024.0  # apply the division
        return '{0}{1}'.format(int(size), suffixes[suffixIndex])
    except TypeError:
        return str(size)


def get_size(path='.'):
    """
    Return the size (in bytes) and number of files, directories under some path
    
    Parameters
    ----------
    path : str, optional
        The path of the directory of which to find the size
    
    Returns
    -------
    int :
        The size of the path in bytes
    int :
        The number of files under the path
    int :
        The number of directories under the path    
    """
    total_size = 0
    num_files = 0
    num_directories = 0
    if os.path.isfile(path):
        try:
            return os.path.getsize(path), 1, 0
        except OSError:
            return 0, 1, 0
    for dir_path, dir_names, file_names in os.walk(path):
        num_directories += 1
        for file_name in file_names:
            file_path = os.path.join(dir_path, file_name)
            if not os.path.islink(file_path):
                num_files += 1
                try:
                    total_size += os.path.getsize(file_path)
                except OSError:
                    pass
    return total_size, num_files, num_directories


def format_num(num, precision=3):
    """
    Format a float according to given precision, returning a string
    
    Parameters
    ----------
    num : object
        Formatted to precision if a float
    precision : int, optional
        The precision with which to format floats
        
    Returns
    -------
    str :
        ``str(num)`` formatted to ``precision`` if ``num`` is a float
    """
    if type(num) is float:
        return '{0:.{1}}'.format(num, precision)
    else:
        return str(num)


def pprint_table(out, table, precision=3):
    """
    Writes a table of data to an output stream, padded for alignment
    
    Each row must have the same number of columns
    
    Parameters
    ----------
    out : Output stream
        (file-like object)
    table : List of lists
        The table to print.
    precision : int, optional
        The precision with which to represent floats
    """
    col_widths = [max([len(format_num(row[i], precision)) for row in table])
                  for i in range(len(table[0]))                             ]

    for row in table:
        out.write('{0:>{1}}'.format(format_num(row[0]),
                                    col_widths[0]      ))
        for i in range(1, len(col_widths[1:-1]) + 1):
            out.write('{0:>{1}}'.format(format_num(row[i]),
                                        col_widths[i] + 2  ))
        out.write('  {0}\n'.format(row[-1]))


def list_directory():
    """
    Print a listing of the size of the current directory and all subdirectories
    """
    
    listing = {'dir_listing': [], 'total_size': 0, 'total_num_files': 0,
               'total_num_directories': 0, 'cwd_num_files': 0,
               'cwd_num_directories': 0, 'cwd_num_links': 0             }
    for item in os.listdir('.'):
        size, num_files, num_directories = get_size('./' + item)
        listing['total_size'] += size
        listing['total_num_files'] += num_files
        listing['total_num_directories'] += num_directories
        listing['dir_listing'].append([size, num_files, item])
        if os.path.isfile(item):
            listing['cwd_num_files'] += 1
        elif os.path.isdir(item):
            listing['cwd_num_directories'] += 1
        elif os.path.islink(item):
            listing['cwd_num_links'] += 1
    listing['dir_listing'].sort()
    listing['dir_listing'].insert(0, ["Size", "No. files", "Name"])
    listing['total_size'] = to_human_readable(listing['total_size'])
    for item in listing['dir_listing']:
        item[0] = to_human_readable(item[0])
    print("Under this directory:")
    pprint_table(sys.stdout, listing['dir_listing'])
    print("\nThis directory:")
    print(listing['cwd_num_files'], "files,  ",
          listing['cwd_num_directories'], "directories,  ",
          listing['cwd_num_links'], "links"                )
    print("\nThis directory and subdirectories:")
    print(listing['total_num_files'], "files,  ",
          listing['total_num_directories'], "directories")
    print("Total size:", listing['total_size'], "\n")
    

if __name__ == "__main__":
    list_directory()

